#!/usr/bin/env bash
#
# Docker convenience wrapper

set -e -o pipefail

: ${DOCKER_REGISTRY_USER:="$(id -un)"}
: ${DOCKER_REGISTRY_NAMESPACE:="${DOCKER_REGISTRY_USER}"}
: ${DOCKER_REGISTRY:="registry-1.docker.io/${DOCKER_REGISTRY_NAMESPACE}"}
: ${DOCKER_IMAGE_TAG:='master'}

: ${DOCKER_IMAGE_CACHE_TAGS:='master latest'}

command_build() {
  local cache_from
  local context="${1?Context must be specified}"
  local name="${2?Name must be specified}"
  local repository="${DOCKER_REGISTRY}/${name}"
  for cache_tag in "${DOCKER_IMAGE_TAG}" ${DOCKER_IMAGE_CACHE_TAGS}; do
    if [[ -z "$(docker image ls -q ${repository}:${cache_tag})" ]]; then
      docker image pull "${repository}:${cache_tag}" || true
    fi
    cache_from="--cache-from ${repository}:${cache_tag} ${cache_from}"
  done
  docker image build \
    --build-arg REGISTRY="${DOCKER_REGISTRY}" \
    --build-arg TAG="${DOCKER_IMAGE_TAG}" \
    ${cache_from} \
    -t "${repository}:${DOCKER_IMAGE_TAG}" "${context}"
}

command_push() {
  local name="${1?Name must be specified}"
  if [[ -z "${is_logged_in}" ]]; then
    trap "docker logout ${DOCKER_REGISTRY?Registry must be specified}" EXIT
    docker login --password-stdin -u "${DOCKER_REGISTRY_USER}" "${DOCKER_REGISTRY}"
    is_logged_in=1
  fi
  docker image push "${DOCKER_REGISTRY}/${name}:${DOCKER_IMAGE_TAG}"
}

main() {
  "command_${1?Command must be specified}" "${@:2}"
}

main "$@"
