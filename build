#!/usr/bin/env bash
#
# Build

set -e -o pipefail

: ${PROJECT:="$(id -un)"}
: ${TAG:='master'}

repo="$([[ -n ${REGISTRY} ]] && ${REGISTRY}/ || true)${PROJECT}/alpine"

build_() {
  build_image
}

build_image() {
  local kind
  local cache_from
  kind="$([[ -n $1 ]] && echo - || true)$1"
  for t in $(echo -e "master${kind}\n${TAG}${kind}" | uniq); do
    cache_from="${cache_from} --cache-from ${repo}:${t}"
    if [[ -z "$(docker image ls -q ${repo}:${t})" ]]; then
      docker image pull "${repo}:${t}" || true
    fi
  done
  docker image build \
    --build-arg REPO="${repo}" \
    --build-arg TAG="${TAG}" \
    ${cache_from} \
    -t "${repo}:${TAG}${kind}" "./$1"
}

build_push() {
  : ${REGISTRY_USER:="${PROJECT}"}
  trap "docker logout ${REGISTRY}" EXIT
  docker login --password-stdin -u "${REGISTRY_USER}" "${REGISTRY}"
  docker image ls -q \
    -f reference="${repo}:${TAG}*" \
    --format '{{.Repository}}:{{.Tag}}' \
    | xargs -I {} docker image push {}
}

build_test() {
  build_image test
}

main() {
  "build_$1" "${@:2}"
}

main "$@"
